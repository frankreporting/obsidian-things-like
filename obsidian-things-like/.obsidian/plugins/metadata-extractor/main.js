/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD.
If you want to view the source, visit the pluginsâ€™ github repository.
*/

var j=Object.create;var T=Object.defineProperty;var J=Object.getOwnPropertyDescriptor;var q=Object.getOwnPropertyNames;var D=Object.getPrototypeOf,W=Object.prototype.hasOwnProperty;var L=l=>T(l,"__esModule",{value:!0});var B=(l,i)=>{L(l);for(var e in i)T(l,e,{get:i[e],enumerable:!0})},R=(l,i,e)=>{if(i&&typeof i=="object"||typeof i=="function")for(let t of q(i))!W.call(l,t)&&t!=="default"&&T(l,t,{get:()=>i[t],enumerable:!(e=J(i,t))||e.enumerable});return l},F=l=>R(L(T(l!=null?j(D(l)):{},"default",l&&l.__esModule&&"default"in l?{get:()=>l.default,enumerable:!0}:{value:l,enumerable:!0})),l);var k=(l,i,e)=>new Promise((t,v)=>{var s=n=>{try{o(e.next(n))}catch(w){v(w)}},m=n=>{try{o(e.throw(n))}catch(w){v(w)}},o=n=>n.done?t(n.value):Promise.resolve(n.value).then(s,m);o((e=e.apply(l,i)).next())});B(exports,{default:()=>E});var A=F(require("obsidian"));var f=F(require("obsidian")),S=F(require("fs"));function N(l){let i=new Blob([l],{type:"text/javascript"}),e=URL.createObjectURL(i),t=new Worker(e);return URL.revokeObjectURL(e),t}function C(){return N(`self.onmessage=function(i){let f=i.data[0],t=i.data[1],n=i.data[2];f.forEach(l=>{let c=l.fileName,d=l.relativePath;n.forEach(e=>{c!==e.fileName&&e.links&&e.links.forEach(a=>{a.relativePath===d&&(a.cleanLink&&a.displayText?t.push({fileName:e.fileName,link:a.link,relativePath:e.relativePath,cleanLink:a.cleanLink,displayText:a.displayText}):a.cleanLink&&!a.displayText?t.push({fileName:e.fileName,link:a.link,relativePath:e.relativePath,cleanLink:a.cleanLink}):!a.cleanLink&&a.displayText?t.push({fileName:e.fileName,link:a.link,relativePath:e.relativePath,displayText:a.displayText}):t.push({fileName:e.fileName,link:a.link,relativePath:e.relativePath}))})}),t.length>0&&(l.backlinks=t),t=[]}),self.postMessage(f)};
`)}var P=class{constructor(i,e){this.plugin=i,this.app=e}getAbsolutePath(i){let e,t;if(this.app.vault.adapter instanceof f.FileSystemAdapter)e=this.app.vault.adapter.getBasePath();else throw new Error("Cannot determine base path.");return t=`${this.app.vault.configDir}/plugins/metadata-extractor/${i}`,`${e}/${t}`}getUniqueTags(i){let e=[];return(0,f.getAllTags)(i)&&(e=(0,f.getAllTags)(i)),e=e.map(t=>t.slice(1).toLowerCase()),e=Array.from(new Set(e)),e}writeAllExceptMd(i){let e=this.plugin.settings.allExceptMdPath;this.plugin.settings.allExceptMdPath||(e=this.getAbsolutePath(i));let t=[],v=this.app.vault.getAllLoadedFiles();for(let n of v)n instanceof f.TFolder&&t.push({name:n.name,relativePath:n.path});let s=[];for(let n of v)n instanceof f.TFile&&n.path.slice(-3)!==".md"&&s.push({name:n.name,basename:n.basename,relativePath:n.path});let m={},o=!0;t.length>0&&s.length>0?Object.assign(m,{folders:t,nonMdFiles:s}):t.length>0&&s.length===0?Object.assign(m,{folders:t}):o=!1,o?((0,S.writeFileSync)(e,JSON.stringify(m,null,2)),this.plugin.settings.consoleLog&&console.log("Metadata Extractor plugin: wrote the allExceptMd JSON file")):new f.Notice("There are neither folders nor non-Markdown files in your vault.")}writeTagsToJSON(i){let e=this.plugin.settings.tagPath;this.plugin.settings.tagPath||(e=this.getAbsolutePath(i));let t=[];(()=>{this.app.vault.getMarkdownFiles().forEach(g=>{let r;this.app.metadataCache.getFileCache(g)!==null&&(r=this.app.metadataCache.getFileCache(g));let d=g.path,u=this.getUniqueTags(r);u.length!==0&&t.push({name:d,tags:u})})})();let s=t.map(g=>g.tags).reduce((g,r)=>g.concat(r.map(d=>d.toLowerCase()))),m=Array.from(new Set(s)),o=this.app.metadataCache.getTags(),n={};for(let[g,r]of Object.entries(o)){let d=g.slice(1).toLowerCase(),u=r;n[d]=u}let w=[];m.forEach(g=>{let r=[];t.forEach(u=>{u.tags.contains(g)&&r.push(u.name)});let d=n[g];w.push({tag:g,tagCount:d,relativePaths:r})}),(0,S.writeFileSync)(e,JSON.stringify(w,null,2)),this.plugin.settings.consoleLog&&console.log("Metadata Extractor plugin: wrote the tagToFile JSON file")}writeCacheToJSON(i){let e=this.plugin.settings.metadataPath;this.plugin.settings.metadataPath||(e=this.getAbsolutePath(i));let t=[],v={};for(let[n,w]of Object.entries(this.app.vault.fileMap)){let g=n,r="";if(g.slice(-3)===".md"){if(g.includes("/")){let d=g.split("/").last();typeof d=="string"&&(r=d)}r=r.slice(0,-3),v[r]=g}}(()=>{this.app.vault.getMarkdownFiles().forEach(n=>{let w=n.basename,g=n.path,r;typeof this.app.metadataCache.getFileCache(n)!="undefined"?r=this.app.metadataCache.getFileCache(n):new f.Notice("Something with accessing the cache went wrong!");let d,u,x=[],c={};c.fileName=w,c.relativePath=g,d=this.getUniqueTags(r),d!==null&&d.length>0&&(c.tags=d),r.frontmatter&&(u=(0,f.parseFrontMatterAliases)(r.frontmatter),u!==null&&u.length>0&&(c.aliases=u)),r.headings&&(r.headings.forEach(h=>{x.push({heading:h.heading,level:h.level})}),c.headings=x);let a=V(r,c,v,g,w);Object.assign(c,a),Object.keys(c).length>0&&t.push(c)})})();let s=[],m=t,o=C();o.postMessage([t,s,m]),o.onerror=n=>{new f.Notice("Something went wrong with the backlinks calculation.")},o.onmessage=n=>{t=n.data,(0,S.writeFileSync)(e,JSON.stringify(t,null,2)),this.plugin.settings.consoleLog&&console.log("Metadata Extractor plugin: wrote the metadata JSON file")}}setWritingSchedule(i,e,t){if(this.plugin.settings.writingFrequency!=="0"){let s=parseInt(this.plugin.settings.writingFrequency)*6e4;window.clearInterval(this.plugin.intervalId1),this.plugin.intervalId1=void 0,this.plugin.intervalId1=window.setInterval(()=>this.writeTagsToJSON(i),s),this.plugin.registerInterval(this.plugin.intervalId1),window.clearInterval(this.plugin.intervalId2),this.plugin.intervalId2=void 0,this.plugin.intervalId2=window.setInterval(()=>this.writeCacheToJSON(e),s),this.plugin.registerInterval(this.plugin.intervalId2),window.clearInterval(this.plugin.intervalId3),this.plugin.intervalId3=void 0,this.plugin.intervalId3=window.setInterval(()=>this.writeAllExceptMd(t),s),this.plugin.registerInterval(this.plugin.intervalId3)}else this.plugin.settings.writingFrequency==="0"&&(window.clearInterval(this.plugin.intervalId1),window.clearInterval(this.plugin.intervalId2),window.clearInterval(this.plugin.intervalId3))}};function V(l,i,e,t,v){let s=[],m=l,o=e,n=i,w=t,g=v,r=[];d();function d(){let x=[],c=[];m.links&&(x=m.links),m.embeds&&(c=m.embeds.filter(a=>{let h=a.link;if(h.includes("/")&&(h=h.split("/").last(),h.includes("#")&&(h=h.replace(/#.+/g,""))),h.includes("#")&&(h=h.replace(/#.+/g,"")),o[h])return a})),r=x.concat(c),u(r)}function u(x){r.forEach(c=>{let a=c.link,h="";typeof c.displayText!="undefined"&&(h=c.displayText),a.includes("/")&&(a=a.split("/").last());let p="";if(!a.includes("#")&&h===a)p=o[a],p?s.push({link:a,relativePath:p}):s.push({link:a});else if(a.includes("#")&&a.charAt(0)!=="#"&&(!h.includes("#")||!h.includes(">"))){let b=h,M=a.replace(/#.+/g,"");p=o[M],p?s.push({link:a,relativePath:p,cleanLink:M,displayText:b}):s.push({link:a,cleanLink:M,displayText:b})}else if(a.includes("#")&&a.charAt(0)!=="#"&&h.includes("#")){let b=a.replace(/#.+/g,"");p=o[b],p?s.push({link:a,relativePath:p,cleanLink:b}):s.push({link:a,cleanLink:b})}else if(!a.includes("#")&&a!==h){let b=h;p=o[a],p?s.push({link:a,relativePath:p,displayText:b}):s.push({link:a,displayText:b})}else if(a.charAt(0)==="#"&&a!==h){let b=h;p=w,s.push({link:a,relativePath:p,cleanLink:g,displayText:b})}else a.charAt(0)==="#"&&a===h&&(p=w,s.push({link:a,relativePath:p}))}),s.length>0&&(n.links=s)}return n}var y=F(require("obsidian")),I={tagPath:"",metadataPath:"",allExceptMdPath:"",tagFile:"tags.json",metadataFile:"metadata.json",allExceptMdFile:"allExceptMd.json",writingFrequency:"0",writeFilesOnLaunch:!1,consoleLog:!1},O=class extends y.PluginSettingTab{constructor(i,e){super(i,e);this.plugin=e}display(){let{containerEl:i}=this;i.empty(),i.createEl("h2",{text:"Metadata Extractor Settings"}),new y.Setting(i).setName("File-write path for tags").setDesc("Where the tag-to-file-names JSON file will be saved. Requires the file name with extension. 			If this is filled in, the setting below won't have any effect.").addText(e=>e.setPlaceholder("/home/user/Downloads/tags.json").setValue(this.plugin.settings.tagPath).onChange(t=>k(this,null,function*(){this.plugin.settings.tagPath=t,yield this.plugin.saveSettings()}))),new y.Setting(i).setName("File name of tag-to-file-names JSON").setDesc("Requires the .json extension. 			Only change this setting if you want to change the name of the saved json in the plugin folder.").addText(e=>e.setPlaceholder("tags.json").setValue(this.plugin.settings.tagFile).onChange(t=>k(this,null,function*(){this.plugin.settings.tagFile=t,yield this.plugin.saveSettings()}))),new y.Setting(i).setName("File-write path for metadata").setDesc("Where the metadata JSON file will be saved. Requires the file name with extension. 			If this is filled in, the setting below won't have any effect.").addText(e=>e.setPlaceholder("/home/user/Downloads/metadata.json").setValue(this.plugin.settings.metadataPath).onChange(t=>k(this,null,function*(){this.plugin.settings.metadataPath=t,yield this.plugin.saveSettings()}))),new y.Setting(i).setName("File name of metadata JSON").setDesc("Requires the .json extension; leave empty if setting above was changed. 			Only change this setting if you want to change the name of the saved json in the plugin folder.").addText(e=>e.setPlaceholder("metadata.json").setValue(this.plugin.settings.metadataFile).onChange(t=>k(this,null,function*(){this.plugin.settings.metadataFile=t,yield this.plugin.saveSettings()}))),new y.Setting(i).setName("File-write path of allExceptMd JSON").setDesc("Where the allExceptMd JSON file will be saved. Requires the file name with extension. 			If this is filled in, the setting below won't have any effect.").addText(e=>e.setPlaceholder("/home/user/Downloads/allExceptMd.json").setValue(this.plugin.settings.allExceptMdPath).onChange(t=>k(this,null,function*(){this.plugin.settings.allExceptMdPath=t,yield this.plugin.saveSettings()}))),new y.Setting(i).setName("File name of allExceptMd JSON").setDesc("Requires the .json extension; leave empty if setting above was changed. 			Only change this setting if you want to change the name of the saved json in the plugin folder.").addText(e=>e.setPlaceholder("metadata.json").setValue(this.plugin.settings.allExceptMdFile).onChange(t=>k(this,null,function*(){this.plugin.settings.allExceptMdFile=t,yield this.plugin.saveSettings()}))),new y.Setting(i).setName("Configure frequency for writing the three JSON files").setDesc("The frequency has to be entered in minutes. Set it to 0 to disable the periodic writing.").addText(e=>e.setPlaceholder("120").setValue(this.plugin.settings.writingFrequency).onChange(t=>k(this,null,function*(){t===""?this.plugin.settings.writingFrequency="0":this.plugin.settings.writingFrequency=t,yield this.plugin.saveSettings(),this.plugin.methods.setWritingSchedule(this.plugin.settings.tagFile,this.plugin.settings.metadataFile,this.plugin.settings.allExceptMdFile)}))),new y.Setting(i).setName("Write JSON files automatically when Obsidian launches").setDesc("If enabled, the JSON files will be written each time Obsidian starts.").addToggle(e=>{e.setValue(this.plugin.settings.writeFilesOnLaunch).onChange(t=>{this.plugin.settings.writeFilesOnLaunch=t,this.plugin.saveSettings()})}),new y.Setting(i).setName("Show console logs").setDesc("Only enable this for debugging purposes.").addToggle(e=>{e.setValue(this.plugin.settings.consoleLog).onChange(t=>{this.plugin.settings.consoleLog=t,this.plugin.saveSettings()})})}};var E=class extends A.Plugin{constructor(){super(...arguments);this.intervalId1=void 0;this.intervalId2=void 0;this.intervalId3=void 0;this.methods=new P(this,this.app)}onload(){return k(this,null,function*(){console.log("loading Metadata Extractor plugin"),yield this.loadSettings(),this.addCommand({id:"write-tags-json",name:"Write JSON file with tags and associated file names to disk.",callback:()=>{this.methods.writeTagsToJSON(this.settings.tagFile)}}),this.addCommand({id:"write-metadata-json",name:"Write JSON file with metadata to disk.",callback:()=>{this.methods.writeCacheToJSON(this.settings.metadataFile)}}),this.addCommand({id:"write-allExceptMd-json",name:"Write JSON file with all folders and non-MD files to disk.",callback:()=>{this.methods.writeAllExceptMd(this.settings.allExceptMdFile)}}),this.addSettingTab(new O(this.app,this)),this.settings.writeFilesOnLaunch&&this.app.workspace.onLayoutReady(()=>{this.methods.writeTagsToJSON(this.settings.tagFile),this.methods.writeCacheToJSON(this.settings.metadataFile),this.methods.writeAllExceptMd(this.settings.allExceptMdFile)}),this.methods.setWritingSchedule(this.settings.tagFile,this.settings.metadataFile,this.settings.allExceptMdFile)})}onunload(){console.log("unloading Metadata Extractor plugin")}loadSettings(){return k(this,null,function*(){this.settings=Object.assign({},I,yield this.loadData())})}saveSettings(){return k(this,null,function*(){yield this.saveData(this.settings)})}};0&&(module.exports={});
